---
import { TopClothing } from "../../data/clothingData.js";
---

<section class="nuestraSeleccion text-center py-8 px-4 md:px-8">
  <h2 class="text-2xl font-bold mb-4">Nuestra Selección</h2>

  <div class="relative overflow-hidden">
    <div id="carousel-container" class="overflow-hidden mx-12">
      <div
        id="carousel"
        class="flex transition-transform duration-300 ease-in-out"
      >
        {
          TopClothing.map((item, index) => (
            <a
              href={`/clothing/${item.slug}`}
              class="w-full md:w-1/3 lg:w-1/4 flex-shrink-0 px-4 group cursor-pointer transform transition-transform duration-300"
              data-index={index}
            >
              <div class="overflow-hidden rounded-xl">
                <img
                  src={item.image?.src}
                  alt={item.name}
                  class="w-full h-auto transition-transform duration-300 ease-in-out group-hover:scale-110 rounded-xl"
                />
              </div>
              <p class="mt-2 font-semibold">{item.name}</p>
              <p class="text-gray-500">S/ {item.price}</p>
            </a>
          ))
        }
      </div>
    </div>

    <button
      id="prevBtn"
      class="absolute left-0 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white rounded-full p-2 shadow-lg z-10 transition-all duration-200 hover:scale-110"
      aria-label="Previous slide"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M15 19l-7-7 7-7"></path>
      </svg>
    </button>

    <button
      id="nextBtn"
      class="absolute right-0 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white rounded-full p-2 shadow-lg z-10 transition-all duration-200 hover:scale-110"
      aria-label="Next slide"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M9 5l7 7-7 7"></path>
      </svg>
    </button>
  </div>
</section>

<script type="module">
  // Obtiene referencias a los elementos principales del carrusel
  const carousel = document.getElementById("carousel");
  const prevBtn = document.getElementById("prevBtn");
  const nextBtn = document.getElementById("nextBtn");
  
  // Inicializa la posición actual del carrusel
  let currentPosition = 0;

  /**
   * Determina el número de elementos visibles según el ancho de la pantalla
   * @returns {number} Número de elementos visibles
   */
  function getVisibleItems() {
    if (window.innerWidth >= 1024) return 4; // Pantallas grandes
    if (window.innerWidth >= 768) return 3;  // Pantallas medianas
    return 1; // Dispositivos móviles
  }

  /**
   * Actualiza el estado de los botones de navegación
   * Deshabilita los botones cuando se llega al inicio o final del carrusel
   */
  function updateButtonState() {
    const totalItems = [...carousel.children].length;
    const visibleItems = getVisibleItems();

    // Deshabilita el botón previo si estamos al inicio
    prevBtn.disabled = currentPosition <= 0;
    // Deshabilita el botón siguiente si estamos al final
    nextBtn.disabled = currentPosition >= totalItems - visibleItems;

    // Ajusta la opacidad visual de los botones
    prevBtn.style.opacity = prevBtn.disabled ? "0.5" : "1";
    nextBtn.style.opacity = nextBtn.disabled ? "0.5" : "1";
  }

  /**
   * Mueve el carrusel en la dirección especificada
   * @param {string} direction - Dirección del movimiento ('prev' o 'next')
   */
  function moveCarousel(direction) {
    // Calcula el ancho de cada elemento y el total de elementos
    const itemWidth = carousel.children[0].offsetWidth;
    const visibleItems = getVisibleItems();
    const totalItems = [...carousel.children].length;

    // Actualiza la posición según la dirección
    if (direction === "next" && currentPosition < totalItems - visibleItems) {
      currentPosition++;
    } else if (direction === "prev" && currentPosition > 0) {
      currentPosition--;
    }

    // Si llegamos al inicio yendo hacia atrás, volvemos al final
    if (currentPosition < 0) {
      currentPosition = totalItems - visibleItems;
    }

    // Aplica la transformación para mover el carrusel
    carousel.style.transform = `translateX(-${currentPosition * itemWidth}px)`;
    updateButtonState();
  }

  // Agrega los event listeners para los botones de navegación
  prevBtn.addEventListener("click", () => moveCarousel("prev"));
  nextBtn.addEventListener("click", () => moveCarousel("next"));

  // Maneja el redimensionamiento de la ventana
  window.addEventListener("resize", () => {
    const itemWidth = carousel.children[0].offsetWidth;
    carousel.style.transform = `translateX(-${currentPosition * itemWidth}px)`;
    updateButtonState();
  });

  // Inicializa el estado de los botones
  updateButtonState();
</script>

<style>
  #carousel-container {
    mask-image: linear-gradient(
      to right,
      transparent,
      black 50px,
      black calc(100% - 50px),
      transparent
    );
    -webkit-mask-image: linear-gradient(
      to right,
      transparent,
      black 50px,
      black calc(100% - 50px),
      transparent
    );
  }
</style>
